"use strict";
/*
 * @adonisjs/lucid
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@poppinss/utils");
/**
 * Checks for database rows for `exists` and `unique` rule.
 */
class DbRowCheck {
    constructor(ruleName, database) {
        this.ruleName = ruleName;
        this.database = database;
    }
    /**
     * Applies user defined constraints on the query builder
     */
    applyConstraints(query, constraints) {
        if (constraints.length > 1) {
            query.where((builder) => {
                constraints.forEach((constraint) => builder.orWhere(constraint));
            });
        }
        else {
            constraints.forEach((constraint) => query.where(constraint));
        }
    }
    /**
     * Compile validation options
     */
    compile(options) {
        /**
         * Ensure options are defined with table and column name
         */
        if (!options || !options.table || !options.column) {
            throw new utils_1.Exception(`"${this.ruleName}" rule expects a "table" and a "column" name`);
        }
        /**
         * Normalize where constraints
         */
        let constraints = [];
        if (options.constraints && Array.isArray(options.constraints)) {
            constraints = options.constraints;
        }
        else if (options.constraints && typeof (options.constraints) === 'object' && options.constraints !== null) {
            constraints = [options.constraints];
        }
        return {
            table: options.table,
            column: options.column,
            connection: options.connection,
            constraints: constraints,
        };
    }
    /**
     * Validate value
     */
    async validate(value, { table, column, constraints, connection }, { pointer, errorReporter, arrayExpressionPointer }) {
        const query = this.database.connection(connection).query().from(table).where(column, value);
        this.applyConstraints(query, constraints);
        const row = await query.first();
        if (this.ruleName === 'exists') {
            if (!row) {
                errorReporter.report(pointer, this.ruleName, `${this.ruleName} validation failure`, arrayExpressionPointer);
            }
            return;
        }
        if (this.ruleName === 'unique') {
            if (row) {
                errorReporter.report(pointer, this.ruleName, `${this.ruleName} validation failure`, arrayExpressionPointer);
            }
            return;
        }
    }
}
/**
 * Extends the validator by adding `unique` and `exists`
 */
function extendValidator(validator, database) {
    /**
     * Exists rule to ensure the value exists in the database
     */
    const existsChecker = new DbRowCheck('exists', database);
    validator.addRule('exists', {
        compile(_, __, args) {
            const compiledOptions = existsChecker.compile(args[0]);
            return {
                async: true,
                allowUndefineds: false,
                name: 'exists',
                compiledOptions: compiledOptions,
            };
        },
        async validate(value, compiledOptions, options) {
            try {
                await existsChecker.validate(value, compiledOptions, options);
            }
            catch (error) {
                options.errorReporter.report(options.pointer, 'exists', error.message, options.arrayExpressionPointer);
            }
        },
    });
    /**
     * Unique rule to check if value is unique or not
     */
    const uniqueChecker = new DbRowCheck('unique', database);
    validator.addRule('unique', {
        compile(_, __, args) {
            const compiledOptions = uniqueChecker.compile(args[0]);
            return {
                async: true,
                allowUndefineds: false,
                name: 'unique',
                compiledOptions: compiledOptions,
            };
        },
        async validate(value, compiledOptions, options) {
            try {
                await uniqueChecker.validate(value, compiledOptions, options);
            }
            catch (error) {
                options.errorReporter.report(options.pointer, 'unique', error.message, options.arrayExpressionPointer);
            }
        },
    });
}
exports.extendValidator = extendValidator;
